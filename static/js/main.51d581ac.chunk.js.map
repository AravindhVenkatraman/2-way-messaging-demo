{"version":3,"sources":["components/App.js","index.js"],"names":["App","controls","document","querySelector","console","log","cameraOptions","video","constraints","width","min","ideal","max","height","getElementById","addEventListener","e","navigator","mediaDevices","getUserMedia","updatedConstraints","deviceId","exact","target","value","startStream","getCameraSelection","a","enumerateDevices","devices","videoDevices","filter","device","kind","options","optionsArr","map","videoDevice","label","concat","innerHTML","join","stream","handleStream","srcObject","ReactDOM","render","StrictMode"],"mappings":"2QAuIeA,EAhIH,WA8DV,IAAMC,EAAWC,SAASC,cAAc,aACxCC,QAAQC,IAAIJ,GACZ,IAAMK,EAAgBJ,SAASC,cAAc,yBACvCI,EAAQL,SAASC,cAAc,SAI/BK,EAAc,CAClBD,MAAO,CACLE,MAAO,CACLC,IAAK,KACLC,MAAO,KACPC,IAAK,MAEPC,OAAQ,CACNH,IAAK,IACLC,MAAO,KACPC,IAAK,QAiBXV,SAASY,eAAe,iBAAiBC,iBAAiB,UAbrC,SAACC,GAEpB,GADAZ,QAAQC,IAAIW,GACR,iBAAkBC,WAAaA,UAAUC,aAAaC,aAAc,CACtE,IAAMC,EAAkB,2BACnBZ,GADmB,IAEtBa,SAAU,CACRC,MAAQN,GAAKA,EAAEO,OAAUP,EAAEO,OAAOC,MAAQ,QAG9CpB,QAAQC,IAAIe,GACZK,EAAYL,OAKhB,IAAMM,EAAkB,uCAAG,kCAAAC,EAAA,sEACHV,UAAUC,aAAaU,mBADpB,OACnBC,EADmB,OAErBC,EAAeD,EAAQE,QAAO,SAAAC,GAAM,MAAoB,eAAhBA,EAAOC,QAC/CC,EAAU,CAAC,2CACXC,EAAaL,EAAaM,KAAI,SAAAC,GAChC,MAAM,kBAAN,OAAyBA,EAAYhB,SAArC,aAAkDgB,EAAYC,MAA9D,gBAEFlC,QAAQC,IAAI8B,GACZ/B,QAAQC,IAAI6B,GACZA,EAAUA,EAAQK,OAAOJ,GACzB7B,EAAckC,UAAYN,EAAQO,KAAK,IAVd,4CAAH,qDAalBhB,EAAW,uCAAG,WAAOjB,GAAP,eAAAmB,EAAA,sEACGV,UAAUC,aAAaC,aAAaX,GADvC,OACZkC,EADY,OAElBtC,QAAQC,IAAIqC,GACZC,EAAaD,GAHK,2CAAH,sDAMXC,EAAe,SAACD,GACpBnC,EAAMqC,UAAYF,GAKpB,OAFAhB,IAEO,8B,MCtHLmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASY,eAAe,W","file":"static/js/main.51d581ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\nimport 'react-chat-widget/lib/styles.css';\n\nimport \"../components/styles.css\"\n\nconst App = () => {\n\n\n\n  // if(!localStorage.getItem('username')) return <Login />\n  // const logout = (e) => {\n  //   CometChat.logout();\n  //   localStorage.clear();\n  //   window.location.href = \"/2-way-messaging-demo\";\n  // }\n  // let component = JSON.parse(localStorage.getItem('component'));\n  // console.log(component);\n\n  // if(component === 0) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatEngineIO />\n  //     </>\n  // } else if(component === 1) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <StreamChatApp />\n  //     </>\n  // } else if(component === 2) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatElements />\n  //     </>\n  // } else if(component === 3) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatUIKit />\n  //     </>\n  // } else if(component === 4) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <Widget />\n  //     </>\n  // } else if(component === 5) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <div style={{height: '95vh'}}>\n  //         <CometChatUI />\n  //       </div>\n  //     </>\n  // } else if(component === 6) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <div style={{height: '95vh'}}>\n  //         {/* <ConversationalUI /> */}\n  //       </div>\n  //     </>\n  // } else {\n  //   return(\n  //     <h3>\n  //       Page not found!\n  //     </h3>\n  //   )\n  // }\n\n  // feather.replace();\n\n  const controls = document.querySelector('.controls');\n  console.log(controls);\n  const cameraOptions = document.querySelector('.video-options>select');\n  const video = document.querySelector('video');\n  // const canvas = document.querySelector('canvas');\n  // const screenshotImage = document.querySelector('img');\n  // const buttons = [...controls.querySelectorAll('button')];\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560,\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      },\n    }\n  };\n  const cameraChange = (e) => {\n    console.log(e);\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n      const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n          exact: (e && e.target) ? e.target.value : null,\n        }\n      };\n      console.log(updatedConstraints);\n      startStream(updatedConstraints);\n    }\n  }\n  document.getElementById(\"camera-select\").addEventListener(\"change\", cameraChange);\n\n  const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    let videoDevices = devices.filter(device => device.kind === 'videoinput');\n    let options = [\"<option value=''>Select camera</option>\"];\n    let optionsArr = videoDevices.map(videoDevice => {\n      return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    console.log(optionsArr);\n    console.log(options);\n    options = options.concat(optionsArr);\n    cameraOptions.innerHTML = options.join('');\n  };\n\n  const startStream = async (constraints) => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    console.log(stream);\n    handleStream(stream);\n  };\n\n  const handleStream = (stream) => {\n    video.srcObject = stream;\n  };\n\n  getCameraSelection();\n\n  return <>\n\n  </>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { CometChat } from '@cometchat-pro/chat';\n\n/*const  appID = \"206755d635dd6b0c\";\nconst region = \"us\";\nconst appSetting = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion(region).build();\nCometChat.init(appID, appSetting).then(\n  () => {\n    console. log(\"Initialization completed successfully\"); */\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  /*},\n  error => {\n    console.log(\"Initialization failed with error:\", error);\n  }\n); */"],"sourceRoot":""}
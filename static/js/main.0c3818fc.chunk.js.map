{"version":3,"sources":["components/App.js","index.js"],"names":["App","controls","document","querySelector","console","log","cameraOptions","video","buttons","querySelectorAll","streamStarted","play","pause","screenshot","constraints","width","min","ideal","max","height","getCameraSelection","a","navigator","mediaDevices","enumerateDevices","devices","videoDevices","filter","device","kind","options","map","videoDevice","deviceId","label","innerHTML","join","onclick","classList","add","remove","getUserMedia","updatedConstraints","exact","value","startStream","stream","handleStream","srcObject","ReactDOM","render","StrictMode","getElementById"],"mappings":"0RA8IeA,EAvIH,WA8DV,IAAMC,EAAWC,SAASC,cAAc,aACxCC,QAAQC,IAAIJ,GACZ,IAAMK,EAAgBJ,SAASC,cAAc,yBACvCI,EAAQL,SAASC,cAAc,SAG/BK,GAFSN,SAASC,cAAc,UACdD,SAASC,cAAc,OAClC,YAAOF,EAASQ,iBAAiB,YAC1CC,GAAgB,EAEpB,cAAkCF,EAAlC,GAAOG,EAAP,KAAaC,EAAb,KAAoBC,EAApB,KAEMC,EAAc,CAClBP,MAAO,CACLQ,MAAO,CACLC,IAAK,KACLC,MAAO,KACPC,IAAK,MAEPC,OAAQ,CACNH,IAAK,IACLC,MAAO,KACPC,IAAK,QAKLE,EAAkB,uCAAG,gCAAAC,EAAA,sEACHC,UAAUC,aAAaC,mBADpB,OACnBC,EADmB,OAEnBC,EAAeD,EAAQE,QAAO,SAAAC,GAAM,MAAoB,eAAhBA,EAAOC,QAC/CC,EAAUJ,EAAaK,KAAI,SAAAC,GAC/B,MAAM,kBAAN,OAAyBA,EAAYC,SAArC,aAAkDD,EAAYE,MAA9D,gBAEF5B,EAAc6B,UAAYL,EAAQM,KAAK,IANd,2CAAH,qDASxBzB,EAAK0B,QAAU,WACb,GAAI3B,EAIF,OAHAH,EAAMI,OACNA,EAAK2B,UAAUC,IAAI,eACnB3B,EAAM0B,UAAUE,OAAO,UAGzB,GAAI,iBAAkBlB,WAAaA,UAAUC,aAAakB,aAAc,CACtE,IAAMC,EAAkB,2BACnB5B,GADmB,IAEtBmB,SAAU,CACRU,MAAOrC,EAAcsC,SAGzBC,EAAYH,KAIhB,IAAMG,EAAW,uCAAG,WAAO/B,GAAP,eAAAO,EAAA,sEACGC,UAAUC,aAAakB,aAAa3B,GADvC,OACZgC,EADY,OAElBC,EAAaD,GAFK,2CAAH,sDAKXC,EAAe,SAACD,GACpBvC,EAAMyC,UAAYF,EAClBnC,EAAK2B,UAAUC,IAAI,UACnB3B,EAAM0B,UAAUE,OAAO,UACvB3B,EAAWyB,UAAUE,OAAO,UAC5B9B,GAAgB,GAKlB,OAFAU,IAEO,8B,MC7HL6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,W","file":"static/js/main.0c3818fc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\nimport 'react-chat-widget/lib/styles.css';\n\nimport \"../components/styles.css\"\n\nconst App = () => {\n\n\n\n  // if(!localStorage.getItem('username')) return <Login />\n  // const logout = (e) => {\n  //   CometChat.logout();\n  //   localStorage.clear();\n  //   window.location.href = \"/2-way-messaging-demo\";\n  // }\n  // let component = JSON.parse(localStorage.getItem('component'));\n  // console.log(component);\n\n  // if(component === 0) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatEngineIO />\n  //     </>\n  // } else if(component === 1) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <StreamChatApp />\n  //     </>\n  // } else if(component === 2) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatElements />\n  //     </>\n  // } else if(component === 3) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <ChatUIKit />\n  //     </>\n  // } else if(component === 4) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <Widget />\n  //     </>\n  // } else if(component === 5) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <div style={{height: '95vh'}}>\n  //         <CometChatUI />\n  //       </div>\n  //     </>\n  // } else if(component === 6) {\n  //   return <>\n  //       <button className=\"logoutBtn\" onClick={logout}>Logout</button>\n  //       <div style={{height: '95vh'}}>\n  //         {/* <ConversationalUI /> */}\n  //       </div>\n  //     </>\n  // } else {\n  //   return(\n  //     <h3>\n  //       Page not found!\n  //     </h3>\n  //   )\n  // }\n\n  // feather.replace();\n\n  const controls = document.querySelector('.controls');\n  console.log(controls);\n  const cameraOptions = document.querySelector('.video-options>select');\n  const video = document.querySelector('video');\n  const canvas = document.querySelector('canvas');\n  const screenshotImage = document.querySelector('img');\n  const buttons = [...controls.querySelectorAll('button')];\n  let streamStarted = false;\n\n  const [play, pause, screenshot] = buttons;\n\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560,\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      },\n    }\n  };\n\n  const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === 'videoinput');\n    const options = videoDevices.map(videoDevice => {\n      return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    cameraOptions.innerHTML = options.join('');\n  };\n\n  play.onclick = () => {\n    if (streamStarted) {\n      video.play();\n      play.classList.add('d-none');\n      pause.classList.remove('d-none');\n      return;\n    }\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n      const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n          exact: cameraOptions.value\n        }\n      };\n      startStream(updatedConstraints);\n    }\n  };\n\n  const startStream = async (constraints) => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleStream(stream);\n  };\n\n  const handleStream = (stream) => {\n    video.srcObject = stream;\n    play.classList.add('d-none');\n    pause.classList.remove('d-none');\n    screenshot.classList.remove('d-none');\n    streamStarted = true;\n  };\n\n  getCameraSelection();\n\n  return <>\n\n  </>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { CometChat } from '@cometchat-pro/chat';\n\n/*const  appID = \"206755d635dd6b0c\";\nconst region = \"us\";\nconst appSetting = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion(region).build();\nCometChat.init(appID, appSetting).then(\n  () => {\n    console. log(\"Initialization completed successfully\"); */\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  /*},\n  error => {\n    console.log(\"Initialization failed with error:\", error);\n  }\n); */"],"sourceRoot":""}